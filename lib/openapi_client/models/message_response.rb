=begin
#The SMS Works API

#The SMS Works provides a low-cost, reliable SMS API for developers. Pay only for delivered texts, all failed UK messages are refunded.

The version of the OpenAPI document: 1.9.0
Contact: support@thesmsworks.co.uk
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.1.0

=end

require 'date'
require 'time'

module OpenapiClient
  class MessageResponse
    attr_accessor :batchid

    attr_accessor :content

    attr_accessor :created

    attr_accessor :customerid

    attr_accessor :deliveryreporturl

    attr_accessor :destination

    attr_accessor :failurereason

    attr_accessor :id

    attr_accessor :identifier

    attr_accessor :keyword

    attr_accessor :messageid

    attr_accessor :modified

    attr_accessor :schedule

    attr_accessor :status

    attr_accessor :sender

    attr_accessor :tag

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'batchid' => :'batchid',
        :'content' => :'content',
        :'created' => :'created',
        :'customerid' => :'customerid',
        :'deliveryreporturl' => :'deliveryreporturl',
        :'destination' => :'destination',
        :'failurereason' => :'failurereason',
        :'id' => :'id',
        :'identifier' => :'identifier',
        :'keyword' => :'keyword',
        :'messageid' => :'messageid',
        :'modified' => :'modified',
        :'schedule' => :'schedule',
        :'status' => :'status',
        :'sender' => :'sender',
        :'tag' => :'tag'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'batchid' => :'String',
        :'content' => :'String',
        :'created' => :'String',
        :'customerid' => :'String',
        :'deliveryreporturl' => :'String',
        :'destination' => :'Float',
        :'failurereason' => :'MessageResponseFailurereason',
        :'id' => :'String',
        :'identifier' => :'String',
        :'keyword' => :'String',
        :'messageid' => :'String',
        :'modified' => :'String',
        :'schedule' => :'String',
        :'status' => :'String',
        :'sender' => :'String',
        :'tag' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::MessageResponse` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::MessageResponse`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'batchid')
        self.batchid = attributes[:'batchid']
      end

      if attributes.key?(:'content')
        self.content = attributes[:'content']
      else
        self.content = nil
      end

      if attributes.key?(:'created')
        self.created = attributes[:'created']
      else
        self.created = nil
      end

      if attributes.key?(:'customerid')
        self.customerid = attributes[:'customerid']
      else
        self.customerid = nil
      end

      if attributes.key?(:'deliveryreporturl')
        self.deliveryreporturl = attributes[:'deliveryreporturl']
      end

      if attributes.key?(:'destination')
        self.destination = attributes[:'destination']
      else
        self.destination = nil
      end

      if attributes.key?(:'failurereason')
        self.failurereason = attributes[:'failurereason']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'identifier')
        self.identifier = attributes[:'identifier']
      end

      if attributes.key?(:'keyword')
        self.keyword = attributes[:'keyword']
      end

      if attributes.key?(:'messageid')
        self.messageid = attributes[:'messageid']
      else
        self.messageid = nil
      end

      if attributes.key?(:'modified')
        self.modified = attributes[:'modified']
      else
        self.modified = nil
      end

      if attributes.key?(:'schedule')
        self.schedule = attributes[:'schedule']
      else
        self.schedule = nil
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      else
        self.status = nil
      end

      if attributes.key?(:'sender')
        self.sender = attributes[:'sender']
      else
        self.sender = nil
      end

      if attributes.key?(:'tag')
        self.tag = attributes[:'tag']
      else
        self.tag = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @content.nil?
        invalid_properties.push('invalid value for "content", content cannot be nil.')
      end

      if @created.nil?
        invalid_properties.push('invalid value for "created", created cannot be nil.')
      end

      if @customerid.nil?
        invalid_properties.push('invalid value for "customerid", customerid cannot be nil.')
      end

      if @destination.nil?
        invalid_properties.push('invalid value for "destination", destination cannot be nil.')
      end

      if @messageid.nil?
        invalid_properties.push('invalid value for "messageid", messageid cannot be nil.')
      end

      if @modified.nil?
        invalid_properties.push('invalid value for "modified", modified cannot be nil.')
      end

      if @schedule.nil?
        invalid_properties.push('invalid value for "schedule", schedule cannot be nil.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      if @sender.nil?
        invalid_properties.push('invalid value for "sender", sender cannot be nil.')
      end

      if @tag.nil?
        invalid_properties.push('invalid value for "tag", tag cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @content.nil?
      return false if @created.nil?
      return false if @customerid.nil?
      return false if @destination.nil?
      return false if @messageid.nil?
      return false if @modified.nil?
      return false if @schedule.nil?
      return false if @status.nil?
      return false if @sender.nil?
      return false if @tag.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          batchid == o.batchid &&
          content == o.content &&
          created == o.created &&
          customerid == o.customerid &&
          deliveryreporturl == o.deliveryreporturl &&
          destination == o.destination &&
          failurereason == o.failurereason &&
          id == o.id &&
          identifier == o.identifier &&
          keyword == o.keyword &&
          messageid == o.messageid &&
          modified == o.modified &&
          schedule == o.schedule &&
          status == o.status &&
          sender == o.sender &&
          tag == o.tag
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [batchid, content, created, customerid, deliveryreporturl, destination, failurereason, id, identifier, keyword, messageid, modified, schedule, status, sender, tag].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
