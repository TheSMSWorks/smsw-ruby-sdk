=begin
#The SMS Works API

#The SMS Works provides a low-cost, reliable SMS API for developers. Pay only for delivered texts, all failed UK messages are refunded.

The version of the OpenAPI document: 1.9.0
Contact: support@thesmsworks.co.uk
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.1.0

=end

require 'cgi'

module OpenapiClient
  class OneTimePasswordApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Retrieve an OTP by it's message ID
    # @param messageid [String] The ID of the OTP you would like returned
    # @param [Hash] opts the optional parameters
    # @return [OTPVerifyResponse]
    def otp_messageid_get(messageid, opts = {})
      data, _status_code, _headers = otp_messageid_get_with_http_info(messageid, opts)
      data
    end

    # Retrieve an OTP by it&#39;s message ID
    # @param messageid [String] The ID of the OTP you would like returned
    # @param [Hash] opts the optional parameters
    # @return [Array<(OTPVerifyResponse, Integer, Hash)>] OTPVerifyResponse data, response status code and response headers
    def otp_messageid_get_with_http_info(messageid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OneTimePasswordApi.otp_messageid_get ...'
      end
      # verify the required parameter 'messageid' is set
      if @api_client.config.client_side_validation && messageid.nil?
        fail ArgumentError, "Missing the required parameter 'messageid' when calling OneTimePasswordApi.otp_messageid_get"
      end
      # resource path
      local_var_path = '/otp/{messageid}'.sub('{' + 'messageid' + '}', CGI.escape(messageid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OTPVerifyResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['JWT']

      new_options = opts.merge(
        :operation => :"OneTimePasswordApi.otp_messageid_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OneTimePasswordApi#otp_messageid_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generates and sends a One-Time Password
    # @param otp [OTP] OTP properties
    # @param [Hash] opts the optional parameters
    # @return [OTPResponse]
    def otp_send_post(otp, opts = {})
      data, _status_code, _headers = otp_send_post_with_http_info(otp, opts)
      data
    end

    # Generates and sends a One-Time Password
    # @param otp [OTP] OTP properties
    # @param [Hash] opts the optional parameters
    # @return [Array<(OTPResponse, Integer, Hash)>] OTPResponse data, response status code and response headers
    def otp_send_post_with_http_info(otp, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OneTimePasswordApi.otp_send_post ...'
      end
      # verify the required parameter 'otp' is set
      if @api_client.config.client_side_validation && otp.nil?
        fail ArgumentError, "Missing the required parameter 'otp' when calling OneTimePasswordApi.otp_send_post"
      end
      # resource path
      local_var_path = '/otp/send'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(otp)

      # return_type
      return_type = opts[:debug_return_type] || 'OTPResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['JWT']

      new_options = opts.merge(
        :operation => :"OneTimePasswordApi.otp_send_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OneTimePasswordApi#otp_send_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generates and sends a One-Time Password
    # @param passcode [OTPVerify] One-Time Password
    # @param [Hash] opts the optional parameters
    # @return [OTPVerifyResponse]
    def otp_verify_post(passcode, opts = {})
      data, _status_code, _headers = otp_verify_post_with_http_info(passcode, opts)
      data
    end

    # Generates and sends a One-Time Password
    # @param passcode [OTPVerify] One-Time Password
    # @param [Hash] opts the optional parameters
    # @return [Array<(OTPVerifyResponse, Integer, Hash)>] OTPVerifyResponse data, response status code and response headers
    def otp_verify_post_with_http_info(passcode, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OneTimePasswordApi.otp_verify_post ...'
      end
      # verify the required parameter 'passcode' is set
      if @api_client.config.client_side_validation && passcode.nil?
        fail ArgumentError, "Missing the required parameter 'passcode' when calling OneTimePasswordApi.otp_verify_post"
      end
      # resource path
      local_var_path = '/otp/verify'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(passcode)

      # return_type
      return_type = opts[:debug_return_type] || 'OTPVerifyResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['JWT']

      new_options = opts.merge(
        :operation => :"OneTimePasswordApi.otp_verify_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OneTimePasswordApi#otp_verify_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
