=begin
#The SMS Works API

#The SMS Works provides a low-cost, reliable SMS API for developers. Pay only for delivered texts, all failed UK messages are refunded.

The version of the OpenAPI document: 1.9.0
Contact: support@thesmsworks.co.uk
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.1.0

=end

require 'cgi'

module OpenapiClient
  class UtilsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Returns a sample error object for the given error code. Useful for designing code to react to errors when they occur for real.
    # @param errorcode [String] The code of the error you would like returned
    # @param [Hash] opts the optional parameters
    # @return [ExtendedErrorModel]
    def utils_errors_errorcode_get(errorcode, opts = {})
      data, _status_code, _headers = utils_errors_errorcode_get_with_http_info(errorcode, opts)
      data
    end

    # Returns a sample error object for the given error code. Useful for designing code to react to errors when they occur for real.
    # @param errorcode [String] The code of the error you would like returned
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExtendedErrorModel, Integer, Hash)>] ExtendedErrorModel data, response status code and response headers
    def utils_errors_errorcode_get_with_http_info(errorcode, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UtilsApi.utils_errors_errorcode_get ...'
      end
      # verify the required parameter 'errorcode' is set
      if @api_client.config.client_side_validation && errorcode.nil?
        fail ArgumentError, "Missing the required parameter 'errorcode' when calling UtilsApi.utils_errors_errorcode_get"
      end
      # resource path
      local_var_path = '/utils/errors/{errorcode}'.sub('{' + 'errorcode' + '}', CGI.escape(errorcode.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ExtendedErrorModel'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['JWT']

      new_options = opts.merge(
        :operation => :"UtilsApi.utils_errors_errorcode_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UtilsApi#utils_errors_errorcode_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the customer ID to the caller
    # @param [Hash] opts the optional parameters
    # @return [TestResponse]
    def utils_test_get(opts = {})
      data, _status_code, _headers = utils_test_get_with_http_info(opts)
      data
    end

    # Returns the customer ID to the caller
    # @param [Hash] opts the optional parameters
    # @return [Array<(TestResponse, Integer, Hash)>] TestResponse data, response status code and response headers
    def utils_test_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UtilsApi.utils_test_get ...'
      end
      # resource path
      local_var_path = '/utils/test'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TestResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['JWT']

      new_options = opts.merge(
        :operation => :"UtilsApi.utils_test_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UtilsApi#utils_test_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
