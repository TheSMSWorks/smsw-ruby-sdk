=begin
#The SMS Works API

#The SMS Works provides a low-cost, reliable SMS API for developers. Pay only for delivered texts, all failed UK messages are refunded.

The version of the OpenAPI document: 1.9.0
Contact: support@thesmsworks.co.uk
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.1.0

=end

require 'cgi'

module OpenapiClient
  class BatchMessagesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Sends a collection of unique SMS messages. Batches may contain up to 5000 messages at a time.
    # @param messages [Object] An array of messages
    # @param [Hash] opts the optional parameters
    # @return [BatchMessageResponse]
    def batch_any_post(messages, opts = {})
      data, _status_code, _headers = batch_any_post_with_http_info(messages, opts)
      data
    end

    # Sends a collection of unique SMS messages. Batches may contain up to 5000 messages at a time.
    # @param messages [Object] An array of messages
    # @param [Hash] opts the optional parameters
    # @return [Array<(BatchMessageResponse, Integer, Hash)>] BatchMessageResponse data, response status code and response headers
    def batch_any_post_with_http_info(messages, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BatchMessagesApi.batch_any_post ...'
      end
      # verify the required parameter 'messages' is set
      if @api_client.config.client_side_validation && messages.nil?
        fail ArgumentError, "Missing the required parameter 'messages' when calling BatchMessagesApi.batch_any_post"
      end
      # resource path
      local_var_path = '/batch/any'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(messages)

      # return_type
      return_type = opts[:debug_return_type] || 'BatchMessageResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['JWT']

      new_options = opts.merge(
        :operation => :"BatchMessagesApi.batch_any_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BatchMessagesApi#batch_any_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all messages in a batch with the given batch ID
    # @param batchid [String] The ID of the batch you would like returned
    # @param [Hash] opts the optional parameters
    # @return [Array<MessageResponse>]
    def batch_batchid_get(batchid, opts = {})
      data, _status_code, _headers = batch_batchid_get_with_http_info(batchid, opts)
      data
    end

    # Retrieve all messages in a batch with the given batch ID
    # @param batchid [String] The ID of the batch you would like returned
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<MessageResponse>, Integer, Hash)>] Array<MessageResponse> data, response status code and response headers
    def batch_batchid_get_with_http_info(batchid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BatchMessagesApi.batch_batchid_get ...'
      end
      # verify the required parameter 'batchid' is set
      if @api_client.config.client_side_validation && batchid.nil?
        fail ArgumentError, "Missing the required parameter 'batchid' when calling BatchMessagesApi.batch_batchid_get"
      end
      # resource path
      local_var_path = '/batch/{batchid}'.sub('{' + 'batchid' + '}', CGI.escape(batchid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<MessageResponse>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['JWT']

      new_options = opts.merge(
        :operation => :"BatchMessagesApi.batch_batchid_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BatchMessagesApi#batch_batchid_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Schedules a batch of SMS messages to be sent at the date time you specify
    # @param sms_message [BatchMessage] Message properties
    # @param [Hash] opts the optional parameters
    # @return [ScheduledBatchResponse]
    def batch_schedule_post(sms_message, opts = {})
      data, _status_code, _headers = batch_schedule_post_with_http_info(sms_message, opts)
      data
    end

    # Schedules a batch of SMS messages to be sent at the date time you specify
    # @param sms_message [BatchMessage] Message properties
    # @param [Hash] opts the optional parameters
    # @return [Array<(ScheduledBatchResponse, Integer, Hash)>] ScheduledBatchResponse data, response status code and response headers
    def batch_schedule_post_with_http_info(sms_message, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BatchMessagesApi.batch_schedule_post ...'
      end
      # verify the required parameter 'sms_message' is set
      if @api_client.config.client_side_validation && sms_message.nil?
        fail ArgumentError, "Missing the required parameter 'sms_message' when calling BatchMessagesApi.batch_schedule_post"
      end
      # resource path
      local_var_path = '/batch/schedule'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(sms_message)

      # return_type
      return_type = opts[:debug_return_type] || 'ScheduledBatchResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['JWT']

      new_options = opts.merge(
        :operation => :"BatchMessagesApi.batch_schedule_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BatchMessagesApi#batch_schedule_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send a single SMS message to multiple recipients.  Batches may contain up to 5000 messages at a time.
    # @param sms_message [BatchMessage] Message properties
    # @param [Hash] opts the optional parameters
    # @return [BatchMessageResponse]
    def batch_send_post(sms_message, opts = {})
      data, _status_code, _headers = batch_send_post_with_http_info(sms_message, opts)
      data
    end

    # Send a single SMS message to multiple recipients.  Batches may contain up to 5000 messages at a time.
    # @param sms_message [BatchMessage] Message properties
    # @param [Hash] opts the optional parameters
    # @return [Array<(BatchMessageResponse, Integer, Hash)>] BatchMessageResponse data, response status code and response headers
    def batch_send_post_with_http_info(sms_message, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BatchMessagesApi.batch_send_post ...'
      end
      # verify the required parameter 'sms_message' is set
      if @api_client.config.client_side_validation && sms_message.nil?
        fail ArgumentError, "Missing the required parameter 'sms_message' when calling BatchMessagesApi.batch_send_post"
      end
      # resource path
      local_var_path = '/batch/send'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(sms_message)

      # return_type
      return_type = opts[:debug_return_type] || 'BatchMessageResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['JWT']

      new_options = opts.merge(
        :operation => :"BatchMessagesApi.batch_send_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BatchMessagesApi#batch_send_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancels a scheduled SMS message
    # @param batchid [String] The ID of the batch you would like returned
    # @param [Hash] opts the optional parameters
    # @return [CancelledMessageResponse]
    def batches_schedule_batchid_delete(batchid, opts = {})
      data, _status_code, _headers = batches_schedule_batchid_delete_with_http_info(batchid, opts)
      data
    end

    # Cancels a scheduled SMS message
    # @param batchid [String] The ID of the batch you would like returned
    # @param [Hash] opts the optional parameters
    # @return [Array<(CancelledMessageResponse, Integer, Hash)>] CancelledMessageResponse data, response status code and response headers
    def batches_schedule_batchid_delete_with_http_info(batchid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BatchMessagesApi.batches_schedule_batchid_delete ...'
      end
      # verify the required parameter 'batchid' is set
      if @api_client.config.client_side_validation && batchid.nil?
        fail ArgumentError, "Missing the required parameter 'batchid' when calling BatchMessagesApi.batches_schedule_batchid_delete"
      end
      # resource path
      local_var_path = '/batches/schedule/{batchid}'.sub('{' + 'batchid' + '}', CGI.escape(batchid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CancelledMessageResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['JWT']

      new_options = opts.merge(
        :operation => :"BatchMessagesApi.batches_schedule_batchid_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BatchMessagesApi#batches_schedule_batchid_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
