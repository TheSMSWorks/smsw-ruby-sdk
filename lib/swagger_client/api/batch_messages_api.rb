=begin
#The SMS Works API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require "uri"

module SwaggerClient
  class BatchMessagesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # 
    # Cancels a scheduled SMS message
    # @param batchid The ID of the batch you would like returned
    # @param [Hash] opts the optional parameters
    # @return [CancelledMessageResponse]
    def cancel_scheduled_batch_job(batchid, opts = {})
      data, _status_code, _headers = cancel_scheduled_batch_job_with_http_info(batchid, opts)
      return data
    end

    # 
    # Cancels a scheduled SMS message
    # @param batchid The ID of the batch you would like returned
    # @param [Hash] opts the optional parameters
    # @return [Array<(CancelledMessageResponse, Fixnum, Hash)>] CancelledMessageResponse data, response status code and response headers
    def cancel_scheduled_batch_job_with_http_info(batchid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BatchMessagesApi.cancel_scheduled_batch_job ..."
      end
      # verify the required parameter 'batchid' is set
      if @api_client.config.client_side_validation && batchid.nil?
        fail ArgumentError, "Missing the required parameter 'batchid' when calling BatchMessagesApi.cancel_scheduled_batch_job"
      end
      # resource path
      local_var_path = "/batches/schedule/{batchid}".sub('{' + 'batchid' + '}', batchid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CancelledMessageResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BatchMessagesApi#cancel_scheduled_batch_job\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Retrieve all messages in a batch with the given batch ID
    # @param batchid The ID of the batch you would like returned
    # @param [Hash] opts the optional parameters
    # @return [MessagesResponse]
    def get_batch_by_id(batchid, opts = {})
      data, _status_code, _headers = get_batch_by_id_with_http_info(batchid, opts)
      return data
    end

    # 
    # Retrieve all messages in a batch with the given batch ID
    # @param batchid The ID of the batch you would like returned
    # @param [Hash] opts the optional parameters
    # @return [Array<(MessagesResponse, Fixnum, Hash)>] MessagesResponse data, response status code and response headers
    def get_batch_by_id_with_http_info(batchid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BatchMessagesApi.get_batch_by_id ..."
      end
      # verify the required parameter 'batchid' is set
      if @api_client.config.client_side_validation && batchid.nil?
        fail ArgumentError, "Missing the required parameter 'batchid' when calling BatchMessagesApi.get_batch_by_id"
      end
      # resource path
      local_var_path = "/batch/{batchid}".sub('{' + 'batchid' + '}', batchid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MessagesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BatchMessagesApi#get_batch_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Schedules a batch of SMS messages to be sent at the date-time you specify
    # @param sms_message Message properties
    # @param [Hash] opts the optional parameters
    # @return [ScheduledBatchResponse]
    def schedule_batch(sms_message, opts = {})
      data, _status_code, _headers = schedule_batch_with_http_info(sms_message, opts)
      return data
    end

    # 
    # Schedules a batch of SMS messages to be sent at the date-time you specify
    # @param sms_message Message properties
    # @param [Hash] opts the optional parameters
    # @return [Array<(ScheduledBatchResponse, Fixnum, Hash)>] ScheduledBatchResponse data, response status code and response headers
    def schedule_batch_with_http_info(sms_message, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BatchMessagesApi.schedule_batch ..."
      end
      # verify the required parameter 'sms_message' is set
      if @api_client.config.client_side_validation && sms_message.nil?
        fail ArgumentError, "Missing the required parameter 'sms_message' when calling BatchMessagesApi.schedule_batch"
      end
      # resource path
      local_var_path = "/batch/schedule"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(sms_message)
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ScheduledBatchResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BatchMessagesApi#schedule_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Send a single SMS message to multiple recipients
    # @param sms_message Message properties
    # @param [Hash] opts the optional parameters
    # @return [BatchMessageResponse]
    def send_batch(sms_message, opts = {})
      data, _status_code, _headers = send_batch_with_http_info(sms_message, opts)
      return data
    end

    # 
    # Send a single SMS message to multiple recipients
    # @param sms_message Message properties
    # @param [Hash] opts the optional parameters
    # @return [Array<(BatchMessageResponse, Fixnum, Hash)>] BatchMessageResponse data, response status code and response headers
    def send_batch_with_http_info(sms_message, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BatchMessagesApi.send_batch ..."
      end
      # verify the required parameter 'sms_message' is set
      if @api_client.config.client_side_validation && sms_message.nil?
        fail ArgumentError, "Missing the required parameter 'sms_message' when calling BatchMessagesApi.send_batch"
      end
      # resource path
      local_var_path = "/batch/send"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(sms_message)
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BatchMessageResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BatchMessagesApi#send_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
