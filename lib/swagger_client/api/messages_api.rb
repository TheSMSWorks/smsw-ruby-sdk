=begin
#The SMS Works API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require "uri"

module SwaggerClient
  class MessagesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # 
    # Cancels a scheduled SMS message
    # @param messageid The ID of the message you would like returned
    # @param [Hash] opts the optional parameters
    # @return [CancelledMessageResponse]
    def cancel_scheduled_job(messageid, opts = {})
      data, _status_code, _headers = cancel_scheduled_job_with_http_info(messageid, opts)
      return data
    end

    # 
    # Cancels a scheduled SMS message
    # @param messageid The ID of the message you would like returned
    # @param [Hash] opts the optional parameters
    # @return [Array<(CancelledMessageResponse, Fixnum, Hash)>] CancelledMessageResponse data, response status code and response headers
    def cancel_scheduled_job_with_http_info(messageid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MessagesApi.cancel_scheduled_job ..."
      end
      # verify the required parameter 'messageid' is set
      if @api_client.config.client_side_validation && messageid.nil?
        fail ArgumentError, "Missing the required parameter 'messageid' when calling MessagesApi.cancel_scheduled_job"
      end
      # resource path
      local_var_path = "/messages/schedule/{messageid}".sub('{' + 'messageid' + '}', messageid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CancelledMessageResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagesApi#cancel_scheduled_job\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Retrieve a logged message by the message ID
    # @param messageid The ID of the message you would like returned
    # @param [Hash] opts the optional parameters
    # @return [MessageResponse]
    def get_message_by_id(messageid, opts = {})
      data, _status_code, _headers = get_message_by_id_with_http_info(messageid, opts)
      return data
    end

    # 
    # Retrieve a logged message by the message ID
    # @param messageid The ID of the message you would like returned
    # @param [Hash] opts the optional parameters
    # @return [Array<(MessageResponse, Fixnum, Hash)>] MessageResponse data, response status code and response headers
    def get_message_by_id_with_http_info(messageid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MessagesApi.get_message_by_id ..."
      end
      # verify the required parameter 'messageid' is set
      if @api_client.config.client_side_validation && messageid.nil?
        fail ArgumentError, "Missing the required parameter 'messageid' when calling MessagesApi.get_message_by_id"
      end
      # resource path
      local_var_path = "/messages/{messageid}".sub('{' + 'messageid' + '}', messageid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MessageResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagesApi#get_message_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Get messages matching your search criteria
    # @param query 
    # @param [Hash] opts the optional parameters
    # @return [MessagesResponse]
    def get_messages(query, opts = {})
      data, _status_code, _headers = get_messages_with_http_info(query, opts)
      return data
    end

    # 
    # Get messages matching your search criteria
    # @param query 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MessagesResponse, Fixnum, Hash)>] MessagesResponse data, response status code and response headers
    def get_messages_with_http_info(query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MessagesApi.get_messages ..."
      end
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        fail ArgumentError, "Missing the required parameter 'query' when calling MessagesApi.get_messages"
      end
      # resource path
      local_var_path = "/messages"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(query)
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MessagesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagesApi#get_messages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Schedules an SMS message to be sent at the date-time you specify
    # @param sms_message Message properties
    # @param [Hash] opts the optional parameters
    # @return [ScheduledMessageResponse]
    def schedule_message(sms_message, opts = {})
      data, _status_code, _headers = schedule_message_with_http_info(sms_message, opts)
      return data
    end

    # 
    # Schedules an SMS message to be sent at the date-time you specify
    # @param sms_message Message properties
    # @param [Hash] opts the optional parameters
    # @return [Array<(ScheduledMessageResponse, Fixnum, Hash)>] ScheduledMessageResponse data, response status code and response headers
    def schedule_message_with_http_info(sms_message, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MessagesApi.schedule_message ..."
      end
      # verify the required parameter 'sms_message' is set
      if @api_client.config.client_side_validation && sms_message.nil?
        fail ArgumentError, "Missing the required parameter 'sms_message' when calling MessagesApi.schedule_message"
      end
      # resource path
      local_var_path = "/message/schedule"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(sms_message)
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ScheduledMessageResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagesApi#schedule_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Sends an SMS message
    # @param sms_message Message properties
    # @param [Hash] opts the optional parameters
    # @return [SendMessageResponse]
    def send_message(sms_message, opts = {})
      data, _status_code, _headers = send_message_with_http_info(sms_message, opts)
      return data
    end

    # 
    # Sends an SMS message
    # @param sms_message Message properties
    # @param [Hash] opts the optional parameters
    # @return [Array<(SendMessageResponse, Fixnum, Hash)>] SendMessageResponse data, response status code and response headers
    def send_message_with_http_info(sms_message, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MessagesApi.send_message ..."
      end
      # verify the required parameter 'sms_message' is set
      if @api_client.config.client_side_validation && sms_message.nil?
        fail ArgumentError, "Missing the required parameter 'sms_message' when calling MessagesApi.send_message"
      end
      # resource path
      local_var_path = "/message/send"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json;charset=UTF-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(sms_message)
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SendMessageResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MessagesApi#send_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
